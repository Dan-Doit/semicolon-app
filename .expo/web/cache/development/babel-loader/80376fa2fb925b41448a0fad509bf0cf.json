{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\EMBEDED\\\\Final_Project\\\\semicolon_app\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { AntDesign } from '@expo/vector-icons';\nimport AppLoading from 'expo-app-loading';\nimport * as Font from 'expo-font';\nimport { Asset } from 'expo-asset';\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { persistCache } from 'apollo-cache-persist';\nimport ApolloClient from 'apollo-boost';\nimport options from \"./apollo\";\nimport { ApolloProvider } from 'react-apollo-hooks';\nimport { ThemeProvider } from 'styled-components';\nimport styles from \"./styles\";\nimport NavController from \"./components/NavController\";\nimport { AuthProvider } from \"./AuthContext\";\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loaded = _useState2[0],\n      setLoaded = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      client = _useState4[0],\n      setClient = _useState4[1];\n\n  var preLoad = function preLoad() {\n    var cache, _client, isLoggedIn;\n\n    return _regeneratorRuntime.async(function preLoad$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({}, AntDesign.font)));\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Asset.loadAsync([require(\"./assets/icon.png\")]));\n\n          case 5:\n            cache = new InMemoryCache({});\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(persistCache({\n              cache: cache,\n              storage: AsyncStorage\n            }));\n\n          case 8:\n            _client = new ApolloClient(_objectSpread({\n              cache: cache\n            }, options));\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"isLoggedIn\"));\n\n          case 11:\n            isLoggedIn = _context.sent;\n\n            if (isLoggedIn === null || isLoggedIn === \"false\") {\n              setIsLoggedIn(false);\n            } else {\n              setIsLoggedIn(true);\n            }\n\n            setLoaded(true);\n            setClient(_client);\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n\n  useEffect(function () {\n    preLoad();\n  }, []);\n  return loaded && client ? React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, React.createElement(ThemeProvider, {\n    theme: styles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, React.createElement(AuthProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, React.createElement(NavController, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 8\n    }\n  })))) : React.createElement(AppLoading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  });\n}","map":{"version":3,"sources":["D:/EMBEDED/Final_Project/semicolon_app/App.js"],"names":["React","useState","useEffect","AntDesign","AppLoading","Font","Asset","AsyncStorage","InMemoryCache","persistCache","ApolloClient","options","ApolloProvider","ThemeProvider","styles","NavController","AuthProvider","App","loaded","setLoaded","client","setClient","preLoad","loadAsync","font","require","cache","storage","getItem","isLoggedIn","setIsLoggedIn","console","log"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,SAAT,QAA2B,oBAA3B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,OAAOC,OAAP;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,MAAP;AACA,OAAOC,aAAP;AACA,SAASC,YAAT;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACAhB,QAAQ,CAAC,KAAD,CADR;AAAA;AAAA,MACrBiB,MADqB;AAAA,MACbC,SADa;;AAAA,mBAEAlB,QAAQ,CAAC,IAAD,CAFR;AAAA;AAAA,MAErBmB,MAFqB;AAAA,MAEbC,SAFa;;AAG5B,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAENjB,IAAI,CAACkB,SAAL,mBACDpB,SAAS,CAACqB,IADT,EAFM;;AAAA;AAAA;AAAA,6CAMNlB,KAAK,CAACiB,SAAN,CAAgB,CAACE,OAAO,qBAAR,CAAhB,CANM;;AAAA;AAQNC,YAAAA,KARM,GAQE,IAAIlB,aAAJ,CAAkB,EAAlB,CARF;AAAA;AAAA,6CAUNC,YAAY,CAAC;AACjBiB,cAAAA,KAAK,EAALA,KADiB;AAEjBC,cAAAA,OAAO,EAAEpB;AAFQ,aAAD,CAVN;;AAAA;AAeNa,YAAAA,OAfM,GAeG,IAAIV,YAAJ;AACbgB,cAAAA,KAAK,EAALA;AADa,eAEVf,OAFU,EAfH;AAAA;AAAA,6CAoBaJ,YAAY,CAACqB,OAAb,CAAqB,YAArB,CApBb;;AAAA;AAoBNC,YAAAA,UApBM;;AAqBZ,gBAAIA,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,OAA1C,EAAmD;AACjDC,cAAAA,aAAa,CAAC,KAAD,CAAb;AACD,aAFD,MAEO;AACLA,cAAAA,aAAa,CAAC,IAAD,CAAb;AACH;;AAGCX,YAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,YAAAA,SAAS,CAACD,OAAD,CAAT;AA7BY;AAAA;;AAAA;AAAA;AAAA;AAgCZW,YAAAA,OAAO,CAACC,GAAR;;AAhCY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAoCA9B,EAAAA,SAAS,CAAC,YAAM;AACdoB,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT;AAKA,SAAOJ,MAAM,IAAIE,MAAV,GACL,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEA,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEN,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACD,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,CADF,CADF,CADK,GASH,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ;AAYD","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { AntDesign  } from '@expo/vector-icons';\nimport AppLoading from 'expo-app-loading';\nimport * as Font from 'expo-font';\nimport { Asset } from 'expo-asset';\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { persistCache } from 'apollo-cache-persist';\nimport ApolloClient from 'apollo-boost';\nimport options from './apollo';\nimport { ApolloProvider } from 'react-apollo-hooks';\nimport { ThemeProvider } from 'styled-components';\nimport styles from './styles';\nimport NavController from './components/NavController';\nimport { AuthProvider } from './AuthContext';\n\nexport default function App() {\n  const [loaded, setLoaded] = useState(false);\n  const [client, setClient] = useState(null);\n  const preLoad = async () => {\n    try {\n      await Font.loadAsync({\n        ...AntDesign.font\n      });\n      \n      await Asset.loadAsync([require('./assets/icon.png')]);\n\n      const cache = new InMemoryCache({});\n\n      await persistCache({\n        cache,\n        storage: AsyncStorage,\n      });\n\n      const client = new ApolloClient({\n        cache,\n        ...options\n      });\n\n      const isLoggedIn = await AsyncStorage.getItem(\"isLoggedIn\");\n      if (isLoggedIn === null || isLoggedIn === \"false\") {\n        setIsLoggedIn(false); \n      } else {\n        setIsLoggedIn(true);\n    }\n    \n      \n      setLoaded(true);\n      setClient(client)\n      \n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => { \n    preLoad();\n  }, []); \n  \n\n  return loaded && client ? (\n    <ApolloProvider client={client} >\n      <ThemeProvider theme={styles}>\n        <AuthProvider>\n       <NavController />\n       </AuthProvider>\n        </ThemeProvider>\n      </ ApolloProvider>\n  ) : (\n      <AppLoading />\n    );\n  \n}\n"]},"metadata":{},"sourceType":"module"}