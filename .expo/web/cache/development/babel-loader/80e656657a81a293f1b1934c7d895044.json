{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\EMBEDED\\\\Final_Project\\\\semicolon_app\\\\screens\\\\tabs\\\\Search\\\\SearchContainer.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport SearchBar from \"../../../components/SearchBar\";\nimport SearchPresenter from \"./SearchPresenter\";\n\nvar _default = function (_React$Component) {\n  _inherits(_default, _React$Component);\n\n  var _super = _createSuper(_default);\n\n  function _default(props) {\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    _this = _super.call(this, props);\n\n    _this.onChange = function (text) {\n      var navigation = _this.props.navigation;\n\n      _this.setState({\n        term: text,\n        shouldFetch: false\n      });\n\n      navigation.setParams({\n        term: text\n      });\n    };\n\n    _this.onSubmit = function () {\n      _this.setState({\n        shouldFetch: true\n      });\n    };\n\n    var _navigation = props.navigation;\n    _this.state = {\n      term: \"\",\n      shouldFetch: false\n    };\n\n    _navigation.setParams({\n      term: _this.state.term,\n      onChange: _this.onChange,\n      onSubmit: _this.onSubmit\n    });\n\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          term = _this$state.term,\n          shouldFetch = _this$state.shouldFetch;\n      return React.createElement(SearchPresenter, {\n        term: term,\n        shouldFetch: shouldFetch,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return _default;\n}(React.Component);\n\n_default.navigationOptions = function (_ref) {\n  var navigation = _ref.navigation;\n  return {\n    headerTitle: function headerTitle() {\n      return React.createElement(SearchBar, {\n        value: navigation.getParam(\"term\", \"\"),\n        onChange: navigation.getParam(\"onChange\", function () {\n          return null;\n        }),\n        onSubmit: navigation.getParam(\"onSubmit\", function () {\n          return null;\n        }),\n        __self: _default,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7,\n          columnNumber: 23\n        }\n      });\n    }\n  };\n};\n\nexport { _default as default };","map":{"version":3,"sources":["D:/EMBEDED/Final_Project/semicolon_app/screens/tabs/Search/SearchContainer.js"],"names":["React","SearchBar","SearchPresenter","props","onChange","text","navigation","setState","term","shouldFetch","setParams","onSubmit","state","Component","navigationOptions","headerTitle","getParam"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP;AACA,OAAOC,eAAP;;;;;;;AAWE,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAanBC,QAbmB,GAaR,UAAAC,IAAI,EAAI;AAAA,UACTC,UADS,GACM,MAAKH,KADX,CACTG,UADS;;AAEjB,YAAKC,QAAL,CAAc;AAAEC,QAAAA,IAAI,EAAEH,IAAR;AAAcI,QAAAA,WAAW,EAAE;AAA3B,OAAd;;AACAH,MAAAA,UAAU,CAACI,SAAX,CAAqB;AACnBF,QAAAA,IAAI,EAAEH;AADa,OAArB;AAGD,KAnBkB;;AAAA,UAoBnBM,QApBmB,GAoBR,YAAM;AACf,YAAKJ,QAAL,CAAc;AAAEE,QAAAA,WAAW,EAAE;AAAf,OAAd;AACD,KAtBkB;;AAAA,QAETH,WAFS,GAEMH,KAFN,CAETG,UAFS;AAGjB,UAAKM,KAAL,GAAa;AACXJ,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,WAAW,EAAE;AAFF,KAAb;;AAIAH,IAAAA,WAAU,CAACI,SAAX,CAAqB;AACnBF,MAAAA,IAAI,EAAE,MAAKI,KAAL,CAAWJ,IADE;AAEnBJ,MAAAA,QAAQ,EAAE,MAAKA,QAFI;AAGnBO,MAAAA,QAAQ,EAAE,MAAKA;AAHI,KAArB;;AAPiB;AAYlB;;;;6BAWQ;AAAA,wBACuB,KAAKC,KAD5B;AAAA,UACCJ,IADD,eACCA,IADD;AAAA,UACOC,WADP,eACOA,WADP;AAEP,aAAO,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAED,IAAvB;AAA6B,QAAA,WAAW,EAAEC,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EAnC0BT,KAAK,CAACa,S;;SAC1BC,iB,GAAoB;AAAA,MAAGR,UAAH,QAAGA,UAAH;AAAA,SAAqB;AAC9CS,IAAAA,WAAW,EAAE;AAAA,aAAK,oBAAC,SAAD;AACd,QAAA,KAAK,EAAET,UAAU,CAACU,QAAX,CAAoB,MAApB,EAA4B,EAA5B,CADO;AAEd,QAAA,QAAQ,EAAEV,UAAU,CAACU,QAAX,CAAoB,UAApB,EAAgC;AAAA,iBAAM,IAAN;AAAA,SAAhC,CAFI;AAGd,QAAA,QAAQ,EAAEV,UAAU,CAACU,QAAX,CAAoB,UAApB,EAAgC;AAAA,iBAAM,IAAN;AAAA,SAAhC,CAHI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAL;AAAA;AADiC,GAArB;AAAA,C","sourcesContent":["import React from \"react\";\r\nimport SearchBar from \"../../../components/SearchBar\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\n\r\nexport default class extends React.Component {\r\n  static navigationOptions = ({ navigation }) => ({\r\n    headerTitle: ()=> <SearchBar\r\n        value={navigation.getParam(\"term\", \"\")}\r\n        onChange={navigation.getParam(\"onChange\", () => null)}\r\n        onSubmit={navigation.getParam(\"onSubmit\", () => null)}\r\n      />\r\n    \r\n  });\r\n  constructor(props) {\r\n    super(props);\r\n    const { navigation } = props;\r\n    this.state = {\r\n      term: \"\",\r\n      shouldFetch: false\r\n    };\r\n    navigation.setParams({\r\n      term: this.state.term,\r\n      onChange: this.onChange,\r\n      onSubmit: this.onSubmit\r\n    });\r\n  }\r\n  onChange = text => {\r\n    const { navigation } = this.props;\r\n    this.setState({ term: text, shouldFetch: false });\r\n    navigation.setParams({\r\n      term: text\r\n    });\r\n  };\r\n  onSubmit = () => {\r\n    this.setState({ shouldFetch: true });\r\n  };\r\n  render() {\r\n    const { term, shouldFetch } = this.state;\r\n    return <SearchPresenter term={term} shouldFetch={shouldFetch} />;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}