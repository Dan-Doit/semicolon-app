{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\EMBEDED\\\\Final_Project\\\\semicolon_app\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { AntDesign } from '@expo/vector-icons';\nimport AppLoading from 'expo-app-loading';\nimport * as Font from 'expo-font';\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { Asset } from \"expo-asset\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { persistCache } from \"apollo-cache-persist\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo-hooks\";\nimport options from \"./apollo\";\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      client = _useState2[0],\n      setClient = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loaded = _useState4[0],\n      setLoaded = _useState4[1];\n\n  var preLoad = function preLoad() {\n    var cache, _client;\n\n    return _regeneratorRuntime.async(function preLoad$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({}, AntDesign.font)));\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(Asset.loadAsync([require(\"./assets/logo.png\")]));\n\n          case 5:\n            cache = new InMemoryCache();\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(persistCache({\n              cache: cache,\n              storage: AsyncStorage\n            }));\n\n          case 8:\n            _client = new ApolloClient(_objectSpread({\n              cache: cache\n            }, options));\n            setLoaded(true);\n            setClient(_client);\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n\n  useEffect(function () {\n    preLoad();\n  }, []);\n  return loaded && client ? React.createElement(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"\\uBC18\\uAC00\\uC6CC\\uC694!\", React.createElement(AntDesign, {\n    name: \"staro\",\n    size: 24,\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 20\n    }\n  })))) : React.createElement(AppLoading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  });\n}","map":{"version":3,"sources":["D:/EMBEDED/Final_Project/semicolon_app/App.js"],"names":["React","useState","useEffect","AntDesign","AppLoading","Font","InMemoryCache","Asset","AsyncStorage","persistCache","ApolloClient","ApolloProvider","options","App","client","setClient","loaded","setLoaded","preLoad","loadAsync","font","require","cache","storage","console","log"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,KAAT,QAAsB,YAAtB;;;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,OAAOC,OAAP;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACAZ,QAAQ,CAAC,KAAD,CADR;AAAA;AAAA,MACrBa,MADqB;AAAA,MACbC,SADa;;AAAA,mBAEAd,QAAQ,CAAC,KAAD,CAFR;AAAA;AAAA,MAErBe,MAFqB;AAAA,MAEbC,SAFa;;AAG5B,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAGRb,IAAI,CAACc,SAAL,mBACDhB,SAAS,CAACiB,IADT,EAHQ;;AAAA;AAAA;AAAA,6CAMRb,KAAK,CAACY,SAAN,CAAgB,CAACE,OAAO,qBAAR,CAAhB,CANQ;;AAAA;AAONC,YAAAA,KAPM,GAOE,IAAIhB,aAAJ,EAPF;AAAA;AAAA,6CAQNG,YAAY,CAAC;AACjBa,cAAAA,KAAK,EAALA,KADiB;AAEjBC,cAAAA,OAAO,EAAEf;AAFQ,aAAD,CARN;;AAAA;AAYNM,YAAAA,OAZM,GAYG,IAAIJ,YAAJ;AACbY,cAAAA,KAAK,EAALA;AADa,eAEXV,OAFW,EAZH;AAgBZK,YAAAA,SAAS,CAAC,IAAD,CAAT;AACAF,YAAAA,SAAS,CAACD,OAAD,CAAT;AAjBY;AAAA;;AAAA;AAAA;AAAA;AAmBZU,YAAAA,OAAO,CAACC,GAAR;;AAnBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAuBAvB,EAAAA,SAAS,CAAC,YAAM;AACdgB,IAAAA,OAAO;AACR,GAFQ,EAEP,EAFO,CAAT;AAGA,SAAOF,MAAM,IAAIF,MAAV,GACL,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEA,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAW,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,OAAhB;AAAwB,IAAA,IAAI,EAAE,EAA9B;AAAkC,IAAA,KAAK,EAAC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAX,CADF,CADF,CADK,GAOH,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ;AAUD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { AntDesign } from '@expo/vector-icons';\nimport AppLoading from 'expo-app-loading';\nimport * as Font from 'expo-font';\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { Asset } from \"expo-asset\";\nimport { Text, View } from 'react-native';\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { persistCache } from \"apollo-cache-persist\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo-hooks\";\nimport options from './apollo';\n\nexport default function App() {\n  const [client, setClient] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const preLoad = async () => { \n    try {\n\n    await Font.loadAsync({\n      ...AntDesign.font\n    });\n    await Asset.loadAsync([require(\"./assets/logo.png\")]);\n      const cache = new InMemoryCache();\n      await persistCache({\n        cache,\n        storage: AsyncStorage\n      });\n      const client = new ApolloClient({\n        cache,\n       ...options\n      });     \n      setLoaded(true);\n      setClient(client);\n     } catch (e) { \n      console.log(e);\n    }  \n  }\n  \n  useEffect(() => { \n    preLoad();\n  },[]); \n  return loaded && client ? (\n    <ApolloProvider client={client}>\n      <View>\n        <Text>반가워요!<AntDesign name=\"staro\" size={24} color=\"black\" /></Text>\n      </View>\n    </ApolloProvider>\n  ) : (\n      <AppLoading />\n    )\n  \n}\n"]},"metadata":{},"sourceType":"module"}