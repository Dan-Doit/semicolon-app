{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\EMBEDED\\\\Final_Project\\\\semicolon_app\\\\screens\\\\tabs\\\\Search\\\\SearchPresenter.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  query search($term: String!) {\\n    searchPost(term: $term) {\\n      id\\n      files {\\n        id\\n        url\\n      }\\n      likeCount\\n      commentCount\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport PropTypes from \"prop-types\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport Loader from \"../../../components/Loader\";\nimport SquarePhoto from \"../../../components/SquarePhoto\";\nexport var SEARCH = gql(_templateObject());\n\nvar SearchPresenter = function SearchPresenter(_ref) {\n  var term = _ref.term,\n      shouldFetch = _ref.shouldFetch;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var _useQuery = useQuery(SEARCH, {\n    variables: {\n      term: term\n    },\n    skip: !shouldFetch,\n    fetchPolicy: \"network-only\"\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      refetch = _useQuery.refetch;\n\n  console.log(data, loading);\n\n  var onRefresh = function onRefresh() {\n    return _regeneratorRuntime.async(function onRefresh$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setRefreshing(true);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(refetch({\n              variables: {\n                term: term\n              }\n            }));\n\n          case 4:\n            _context.next = 8;\n            break;\n\n          case 6:\n            _context.prev = 6;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 8:\n            _context.prev = 8;\n            setRefreshing(false);\n            return _context.finish(8);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 6, 8, 11]], Promise);\n  };\n\n  return React.createElement(ScrollView, {\n    refreshControl: React.createElement(RefreshControl, {\n      onRefresh: onRefresh,\n      refreshing: refreshing,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, loading ? React.createElement(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }) : data && data.searchPost && data.searchPost.map(function (post) {\n    return React.createElement(SquarePhoto, _extends({\n      key: post.id\n    }, post, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 37\n      }\n    }));\n  }));\n};\n\nSearchPresenter.propTypes = {\n  term: PropTypes.string.isRequired,\n  shouldFetch: PropTypes.bool.isRequired\n};\nexport default SearchPresenter;","map":{"version":3,"sources":["D:/EMBEDED/Final_Project/semicolon_app/screens/tabs/Search/SearchPresenter.js"],"names":["React","useState","PropTypes","gql","useQuery","Loader","SquarePhoto","SEARCH","SearchPresenter","term","shouldFetch","refreshing","setRefreshing","variables","skip","fetchPolicy","data","loading","refetch","console","log","onRefresh","searchPost","map","post","id","propTypes","string","isRequired","bool"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAGA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,MAAP;AACA,OAAOC,WAAP;AAEA,OAAO,IAAMC,MAAM,GAAGJ,GAAH,mBAAZ;;AAcP,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,OAA2B;AAAA,MAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AAAA,kBACbT,QAAQ,CAAC,KAAD,CADK;AAAA;AAAA,MAC1CU,UAD0C;AAAA,MAC9BC,aAD8B;;AAAA,kBAEdR,QAAQ,CAACG,MAAD,EAAS;AAClDM,IAAAA,SAAS,EAAE;AACTJ,MAAAA,IAAI,EAAJA;AADS,KADuC;AAIlDK,IAAAA,IAAI,EAAE,CAACJ,WAJ2C;AAKlDK,IAAAA,WAAW,EAAC;AALsC,GAAT,CAFM;AAAA,MAEzCC,IAFyC,aAEzCA,IAFyC;AAAA,MAEnCC,OAFmC,aAEnCA,OAFmC;AAAA,MAE1BC,OAF0B,aAE1BA,OAF0B;;AASjDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkBC,OAAlB;;AACA,MAAMI,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdT,YAAAA,aAAa,CAAC,IAAD,CAAb;AAFc;AAAA,6CAGRM,OAAO,CAAC;AAAEL,cAAAA,SAAS,EAAE;AAAEJ,gBAAAA,IAAI,EAAJA;AAAF;AAAb,aAAD,CAHC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAMdG,YAAAA,aAAa,CAAC,KAAD,CAAb;AANc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AASA,SACE,oBAAC,UAAD;AACE,IAAA,cAAc,EACZ,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAES,SAA3B;AAAsC,MAAA,UAAU,EAAEV,UAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGM,OAAO,GACN,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAGND,IAAI,IACJA,IAAI,CAACM,UADL,IAEAN,IAAI,CAACM,UAAL,CAAgBC,GAAhB,CAAoB,UAAAC,IAAI;AAAA,WAAI,oBAAC,WAAD;AAAa,MAAA,GAAG,EAAEA,IAAI,CAACC;AAAvB,OAA+BD,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAJ;AAAA,GAAxB,CAVJ,CADF;AAeD,CAlCD;;AAoCAhB,eAAe,CAACkB,SAAhB,GAA4B;AAC1BjB,EAAAA,IAAI,EAAEP,SAAS,CAACyB,MAAV,CAAiBC,UADG;AAE1BlB,EAAAA,WAAW,EAAER,SAAS,CAAC2B,IAAV,CAAeD;AAFF,CAA5B;AAKA,eAAepB,eAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { ScrollView, RefreshControl } from \"react-native\";\r\n//import styled from \"styled-components/native\";\r\nimport PropTypes from \"prop-types\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { useQuery } from \"react-apollo-hooks\";\r\nimport Loader from \"../../../components/Loader\";\r\nimport SquarePhoto from \"../../../components/SquarePhoto\";\r\n\r\nexport const SEARCH = gql`\r\n  query search($term: String!) {\r\n    searchPost(term: $term) {\r\n      id\r\n      files {\r\n        id\r\n        url\r\n      }\r\n      likeCount\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nconst SearchPresenter = ({ term, shouldFetch }) => {\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const { data, loading, refetch } = useQuery(SEARCH, {\r\n    variables: {\r\n      term\r\n    },\r\n    skip: !shouldFetch,\r\n    fetchPolicy:\"network-only\"\r\n  });\r\n  console.log(data, loading);\r\n  const onRefresh = async () => {\r\n    try {\r\n      setRefreshing(true);\r\n      await refetch({ variables: { term } });\r\n    } catch (e) {\r\n    } finally {\r\n      setRefreshing(false);\r\n    }\r\n  };\r\n  return (\r\n    <ScrollView\r\n      refreshControl={\r\n        <RefreshControl onRefresh={onRefresh} refreshing={refreshing} />\r\n      }\r\n    >\r\n      {loading ? (\r\n        <Loader />\r\n      ) : (\r\n        data &&\r\n        data.searchPost &&\r\n        data.searchPost.map(post => <SquarePhoto key={post.id} {...post} />)\r\n      )}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nSearchPresenter.propTypes = {\r\n  term: PropTypes.string.isRequired,\r\n  shouldFetch: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default SearchPresenter;"]},"metadata":{},"sourceType":"module"}